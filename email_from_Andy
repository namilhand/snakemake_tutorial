From: Andy Tock <ajt200@cam.ac.uk>
Sent: Wednesday, August 25, 2021 5:48 PM
To: 최규하(생명과학과)
Cc: dongzhaonian@caas.cn; irh25@cam.ac.uk
Subject: Re: Query about Z-score standardized

Dear Zhaonian,

I have implemented the SPO11-1-oligo data processing and alignment
pipeline as a Snakemake workflow.

You might not be familiar with Snakemake (
https://snakemake.readthedocs.io/en/stable/ ), so the Snakemake pipeline
consists of the following attached files:
1. a Snakefile in which the steps of the pipeline ("rules" with inputs
and outputs) are specified;
2. a configuration file (config.yaml) in which different parameters for
rules within the Snakefile can be set;
3. a conda environment.yaml file which contains the names of software
packages used by the pipeline, and is used to create the conda
environment (i.e., to create the environment, run: conda env create
--name ChIPseq_mapping --file environment.yaml); and
4. a bash script for activating the conda environment and running the
pipeline (condor_submit.sh; I use this script to submit the job to a
cluster via our Condor submission system).

As specified in the Snakefile and config.yaml, a bowtie2-indexed
reference genome with prefix "TAIR10_chr_all" and a corresponding
chromosome sizes file should be located in the subdirectory
"data/index/", relative to where the Snakefile and config.yaml are
located. SPO11-1-oligos fastq.gz files should be located in the "data/"
subdirectory relative to where the Snakefile and config.yaml are
located.

The Snakemake rule bedgraphToTSV uses the attached R script
genomeBin_bedgraphToTSV.R, which should be made executable and put in
the scripts/ directory (chmod +x scripts/genomeBin_bedgraphToTSV.R), to
calculate mean normalized coverage values in adjacent genomic windows
(deepTools BPM, equivalent to TPM in RNA-seq). You'll need to edit the
first line of genomeBin_bedgraphToTSV.R to reflect the path to your R
installation and ensure the R packages "parallel", "plyr" and
"data.table" are installed.

The Snakemake per_base_coverage ruke uses the attached bash script
perbase_1based_coverage.sh, which should also be made executable and put
in the scripts/ directory (chmod +x scripts/perbase_1based_coverage.sh),
to convert bedgraph files (generated by the calc_coverage rule) into
files containing per-base normalized coverage values (deepTools BPM,
equivalent to TPM in RNA-seq). You might want to use these to calculate
per-base log2((SPO11-1-oligos+1)/(gDNA+1)) values for finer-scale
analyses.

I've attached a slightly different version of the pipeline for read 1 of
the gDNA data (Snakefile_gDNA and config.yaml_gDNA; these should be
renamed without the "_gDNA" suffix before running), which should be run
within a directory separate from the SPO11-1-oligos Snakemake directory,
and with its own "data/" and "data/index/" subdirectories.

After alignment of SPO11-1-oligo reads and naked gDNA reads and coverage
normalization using the Snakemake pipeline, we then calculate
log2(SPO11-1-oligos/gDNA) ratios in adjacent genomic windows (with the
attached log2ChIPcontrol_genomeBin_TSV.R, which uses the outputs of
genomeBin_bedgraphToTSV.R to create a table of values for adjacent
windows along each chromosome, with and without moving-average smoothing
applied.) or at per-base resolution (with the attached
bigwigCompare_log2ChIPcontrol_bw.sh).

The gDNA library serves as a control to account for mapping biases. For
this, we use Read 1 (R1) from a paired-end gDNA library (
https://www.ebi.ac.uk/ena/browser/view/ERR2215865 ), trimmed to 50 bp so
that gDNA reads are of comparable length to the single-end SPO11-1-oligo
reads.


For all of this to run smoothly, you'll want to create a self-contained
environment with all the required software, using conda with the
environment.yaml file I attached:

conda env create --file environment.yaml --name ChIPseq_mapping

To activate the environment, you would then run:

conda activate ChIPseq_mapping

Then to run the Snakemake workflow:

snakemake -p --cores 48

("--cores" should reflect the number of CPUs available on your machine
and the config.yaml should also be edited to reflect this and available
RAM).

To deactivate the environment, it's:

conda deactivate


Best wishes,
Andy
